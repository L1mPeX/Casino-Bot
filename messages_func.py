#!/usr/bin/python3.6
import func, menu, config
import random
def error_message(message, bot):
    bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É")
def not_enough_money(message, bot, error_sum):
    chat_id = message.chat.id
    user_balanse = func.get_user_information(chat_id)[1]
    bot.send_message(message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω {user_balanse} RUB\n–°—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤–≤–µ–ª–∏ —Ä–∞–≤–Ω–∞ {error_sum}\n–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –±–∞–ª–∞–Ω—Å")
def main_profile(message, bot):
    chat_id = message.chat.id
    user_information = func.get_user_information(chat_id)
    user_balanse = user_information[1]
    if user_information[2] != 0:
        average_list = user_information[3] / user_information[2]
    else:
        average_list = 0
    bot.send_message(chat_id, f"üë§–ü—Ä–æ—Ñ–∏–ª—å:\n\nüí∞–ë–∞–ª–∞–Ω—Å: {user_balanse} RUB \n\n üìà–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ {average_list} RUB", reply_markup = menu.gen_refer_kb())
def refer_system(call, bot, user_data):
    chat_id = call.message.chat.id
    user_information = func.get_user_information(chat_id)
    ref_sum = user_information[4]
    count_refs = user_information[5]
    bot.send_message(chat_id, f"üë•–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ {count_refs}\n\n–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã - {ref_sum} RUB\n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ - https://t.me/{config.bot_name}?start={chat_id}", reply_markup = menu.gen_ref_system_kb())
def how_work_referal_system(call, bot, user_data):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "–ü–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å –ø—Ä–æ–¥–∞–∂ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏! –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –±–æ—Ç–µ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, —Ç–æ –≤–∞–º–∏ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç.\n\n–°–µ–π—á–∞—Å —É—Å–ª–æ–≤–∏—è —Ç–∞–∫–∏–µ:\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 5% —Å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup = menu.gen_return_referal_system_how_it_works())
def main_profile_call(call, bot, user_data):
    chat_id = call.message.chat.id
    user_information = func.get_user_information(chat_id)
    user_balanse = user_information[1]
    if user_information[2] != 0:
        average_list = user_information[3] / user_information[2]
    else:
        average_list = 0
    bot.send_message(chat_id, f"üë§–ü—Ä–æ—Ñ–∏–ª—å:\n\nüí∞–ë–∞–ª–∞–Ω—Å: {user_balanse} RUB \n\n üìà–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ {average_list} RUB", reply_markup = menu.gen_refer_kb())
def main_user_balanse(message, bot):
    chat_id = message.chat.id
    user_balanse = func.get_user_information(chat_id)[1]
    bot.send_message(chat_id, f"üí∞–ë–∞–ª–∞–Ω—Å:\n\nüí∑ {user_balanse} RUB", reply_markup = menu.gen_balanse_kb())


def popolnenye(call, bot, user_data):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", reply_markup = menu.gen_popoln_plateg_sys_kb())
def withdraw(call, bot, user_data):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞", reply_markup = menu.gen_withdraw_plateg_sys_kb())
def popoln_qiwi(call, bot, user_data):
    chat_id = call.message.chat.id
    try:
        func.delete_last_popoln(chat_id)
    except:
        pass
    bot.register_next_step_handler(bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö"),get_sum_popoln, bot = bot)
def popoln_btc(call, bot, user_data):
    chat_id = call.message.chat.id
    bot.register_next_step_handler(bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à BTC –∫–æ—à–µ–ª–µ–∫, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–µ—Å–µ—Ç"), get_btc_num, bot = bot)




def get_sum_popoln(message, bot):
    try:
        chat_id = message.chat.id
        sum_popoln = float(message.text)
        bot.register_next_step_handler(bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä Qiwi –∫–æ—à–µ–ª—å–∫–∞ –±–µ–∑ –∑–Ω–∞–∫–∞ + —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"), get_qiwi_num, bot = bot, sum_popoln = sum_popoln)
    except:
        error_message(message, bot)
def get_qiwi_num(message, bot, sum_popoln):
    try:
        chat_id = message.chat.id
        qiwi_num = int(message.text)
        code = random.randint(1000000000, 9999999999)
        code2 = random.randint(1000000000, 9999999999)
        func.create_qiwi_popoln(chat_id, sum_popoln, qiwi_num, code)
        popoln = func.get_last_popoln(chat_id)
        bot.send_message(chat_id, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ #{code2}\n\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {popoln[1]} RUB\n\n–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {config.qiwi_num}\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {popoln[3]}", reply_markup = menu.gen_check_popoln())
    except:
        error_message(message, bot)
def get_btc_num(message, bot):
    chat_id = message.chat.id
    btc_num = message.text
    btc_num = func.create_new_coinbase_plateg()
    bot.send_message(chat_id, f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ—à–ª–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å—Å {btc_num}, —Ç—É —Å—É–º–º—É BTC, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å", reply_markup = menu.gen_check_btc_kb(btc_num))
def main_user_balanse_call(call, bot, user_data):
    chat_id = call.message.chat.id
    user_balanse = func.get_user_information(chat_id)[1]
    bot.send_message(chat_id, f"üí∞–ë–∞–ª–∞–Ω—Å:\n\nüí∑ {user_balanse} RUB", reply_markup = menu.gen_balanse_kb())
def check_popoln(call, bot, user_data):
    chat_id = call.message.chat.id
    popoln = func.get_last_popoln(chat_id)
    S = func.check_qiwi_repl(chat_id)
    if S:
        bot.edit_message_text(chat_id = chat_id, message_id = call.message.message_id, text = f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {popoln[1]} RUB")
    else:
        pass
def check_btc(call, bot, user_data):
    chat_id = call.message.chat.id
    sum_pl = func.get_sum_payments_from_adress(user_data)
    c = func.get_course_btc_rub()
    sum_rub = sum_pl * c
    if sum_pl > 0:
       func.repl_bal(chat_id, sum_rub)
       bot.edit_message_text(chat_id = chat_id, message_id = call.message.message_id, text = f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω\n–ù–∞ {sum_rub} RUB")




def withdraw_qiwi(call, bot, user_data):
    chat_id = call.message.chat.id
    if func.check_unicless_withdraw(chat_id):
        mes = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –≤ RUB")
        bot.register_next_step_handler(mes, get_qiwi_sum_withdraw, bot = bot)
    else:
        bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–≤–æ–¥–∞, –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏")
def get_qiwi_sum_withdraw(message, bot):
    try:
        chat_id = message.chat.id
        sum_withdraw = float(message.text)
        user_balanse = func.get_user_information(chat_id)[1]
        if sum_withdraw / 100 * (100 + config.withdraw_comission) <= user_balanse:
            mes = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ Qiwi –∫–æ—à–µ–ª–µ–∫ –±–µ–∑ –∑–Ω–∞–∫–∞ +")
            bot.register_next_step_handler(mes, get_qiwi_num_withdraw, bot = bot, sum_withdraw = sum_withdraw)
        else:
            not_enough_money(message, bot, sum_withdraw)
    except:
        error_message(message, bot)
def get_qiwi_num_withdraw(message, bot, sum_withdraw):
    try:
        chat_id = message.chat.id
        qiwi_num = int(message.text)
        func.withdraw_sum_from_balanse(chat_id, sum_withdraw / 100 * (100 + config.withdraw_comission))
        func.create_withdraw(chat_id, sum_withdraw, qiwi_num, 1)
        bot.send_message(chat_id, "–í—ã–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    except:
        error_message(message, bot)
def withdraw_btc(call, bot, user_data):
    chat_id = call.message.chat.id
    if func.check_unicless_withdraw(chat_id):
        mes = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –≤ RUB")
        bot.register_next_step_handler(mes, get_btc_sum_withdraw, bot = bot)
    else:
        bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–≤–æ–¥–∞, –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏")
def get_btc_sum_withdraw(message, bot):
    try:
        chat_id = message.chat.id
        sum_withdraw = float(message.text)
        user_balanse = func.get_user_information(chat_id)[1]
        c = func.get_course_btc_rub()
        if sum_withdraw / 100 * (100 + config.withdraw_comission) <= user_balanse:
            sum_withdraw = sum_withdraw * c
            mes = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ BTC –∫–æ—à–µ–ª–µ–∫")
            bot.register_next_step_handler(mes, get_btc_num_withdraw, bot = bot, sum_withdraw = sum_withdraw)
        else:
            not_enough_money(message, bot, sum_withdraw)
    except:
        error_message(message, bot)
def get_btc_num_withdraw(message, bot, sum_withdraw):
    chat_id = message.chat.id
    btc_num = message.text
    func.withdraw_sum_from_balanse(chat_id, sum_withdraw / 100 * (100 + config.withdraw_comission))
    func.create_withdraw(chat_id, sum_withdraw, btc_num, 2)







def dice_game(message, bot):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è", reply_markup = menu.gen_dice_game_kb()) 
def create_dice_game_step1(call, bot, user_data):
    chat_id = call.message.chat.id
    mes = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ RUB")
    bot.register_next_step_handler(mes, create_dice_game_step2, bot = bot)
def create_dice_game_step2(message, bot):
    try:
        chat_id = message.chat.id
        user_balanse = func.get_user_information(chat_id)[1]
        sum_bet = float(message.text)
        if sum_bet / 100 * (100 + config.games_comission) <= user_balanse:
            if sum_bet >= config.min_sum_bet and sum_bet <= config.max_sum_bet:
                func.withdraw_sum_from_balanse(chat_id, sum_bet / 100 * (100 + config.games_comission))
                mes = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã", reply_markup = menu.gen_dice_step3_kb(sum_bet))
            else:
                bot.send_message(chat_id, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ - {config.min_sum_bet}\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ - {config.max_sum_bet}")
        else:
            not_enough_money(message, bot, sum_bet)
    except:
        error_message(message, bot)
def create_dice_game_one_dice(call, bot, user_data):
    chat_id = call.message.chat.id
    sum_bet = float(user_data)
    mes = bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º - üé≤")
    bot.register_next_step_handler(mes, get_value_one_dice_game, bot = bot, sum_bet = sum_bet)
def get_value_one_dice_game(message, bot, sum_bet):
    try:
        chat_id = message.chat.id
        value = message.dice.value
        game_hash = random.randint(1000000000000, 999999999999999)
        func.create_game(game_hash, sum_bet, chat_id, value, 'üé≤')
        for i in config.chats_ids:
            bot.send_message(i, f"üé≤üé≤ Dice #{game_hash}\n\nüí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ {sum_bet} RUB \n\n–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
        bot.send_message(chat_id, f"üé≤ Dice #{game_hash}\n\nüí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ {sum_bet} RUB\n\n‚ô†Ô∏è –í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - {value}\n\n‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
        bot.send_message(chat_id, "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è", reply_markup = menu.gen_dice_game_kb()) 
    except:
        error_message(message, bot)
def create_dice_game_two_dice(call, bot, user_data):
    chat_id = call.message.chat.id
    sum_bet = float(user_data)
    mes = bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º - üé≤")
    bot.register_next_step_handler(mes, get_value_firtht_dice_game, bot = bot, sum_bet = sum_bet)
def get_value_firtht_dice_game(message, bot, sum_bet):
    try:
        chat_id = message.chat.id
        value = message.dice.value
        mes = bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º - üé≤")
        bot.register_next_step_handler(mes, get_value_second_dice_game, bot = bot, sum_bet = sum_bet, value = value)
    except:
        error_message(message, bot)
def get_value_second_dice_game(message, bot, sum_bet, value):    
    try:
        game_hash = random.randint(1000000000000, 999999999999999)
        chat_id = message.chat.id
        value = message.dice.value + value
        func.create_game(game_hash, sum_bet, chat_id, value, 'üé≤üé≤')
        for i in config.chats_ids:
            bot.send_message(i, f"üé≤üé≤ Dice #{game_hash}\n\nüí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ {sum_bet} RUB \n\n–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
        bot.send_message(chat_id, f"üé≤üé≤ Dice #{game_hash}\n\nüí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ {sum_bet} RUB\n\n‚ô†Ô∏è –í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - {value}\n\n‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
        bot.send_message(chat_id, "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è", reply_markup = menu.gen_dice_game_kb()) 
    except:
        error_message(message, bot)
def create_dice_game_basketball_dice(call, bot, user_data):
    chat_id = call.message.chat.id
    sum_bet = float(user_data)
    mes = bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º - üèÄ")
    bot.register_next_step_handler(mes, get_value_basket_dice_game, bot = bot, sum_bet = sum_bet)
def get_value_basket_dice_game(message, bot, sum_bet):
    try:
        chat_id = message.chat.id
        value = message.dice.value
        game_hash = random.randint(1000000000000, 999999999999999)
        func.create_game(game_hash, sum_bet, chat_id, value, 'üèÄ')
        bot.send_message(chat_id, f"üèÄ Dice #{game_hash}\n\nüí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ {sum_bet} RUB\n\n‚ô†Ô∏è –í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - {value}\n\n‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
        chat_id = message.chat.id
        bot.send_message(chat_id, "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è", reply_markup = menu.gen_dice_game_kb()) 
    except:
        error_message(message, bot)
def create_dice_game_darts_dice(call, bot, user_data):
    chat_id = call.message.chat.id
    sum_bet = float(user_data)
    mes = bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º - üéØ")
    bot.register_next_step_handler(mes, get_value_darts_dice_game, bot = bot, sum_bet = sum_bet)
def get_value_darts_dice_game(message, bot, sum_bet):
    try:
        chat_id = message.chat.id
        value = message.dice.value
        game_hash = random.randint(1000000000000, 999999999999999)
        func.create_game(game_hash, sum_bet, chat_id, value, 'üéØ')
        bot.send_message(chat_id, f"üéØ Dice #{game_hash}\n\nüí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ {sum_bet} RUB\n\n‚ô†Ô∏è –í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - {value}\n\n‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
        chat_id = message.chat.id
        bot.send_message(chat_id, "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è", reply_markup = menu.gen_dice_game_kb()) 
    except:
        error_message(message, bot)
def create_dice_game_football_dice(call, bot, user_data):
    chat_id = call.message.chat.id
    sum_bet = float(user_data)
    mes = bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º - ‚öΩÔ∏è")
    bot.register_next_step_handler(mes, get_value_football_dice_game, bot = bot, sum_bet = sum_bet)
def get_value_football_dice_game(message, bot, sum_bet):
    try:
        chat_id = message.chat.id
        game_hash = random.randint(1000000000000, 999999999999999)
        value = message.dice.value
        func.create_game(game_hash, sum_bet, chat_id, value, '‚öΩÔ∏è')
        bot.send_message(chat_id, f"‚öΩÔ∏è Dice #{game_hash}\n\nüí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ {sum_bet} RUB\n\n‚ô†Ô∏è –í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - {value}\n\n‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
        chat_id = message.chat.id
        bot.send_message(chat_id, "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è", reply_markup = menu.gen_dice_game_kb()) 
    except:
        error_message(message, bot)
def play_dice(call, bot, user_data):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å", reply_markup = menu.create_kb_dices())
def dice_game_call(call, bot, user_data):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è", reply_markup = menu.gen_dice_game_kb()) 
def get_game_information(call, bot, user_data):
    chat_id = call.message.chat.id
    game = func.get_dice_by_hash(user_data)
    bot.send_message(chat_id, f"{game[6]} Dice #{game[0]}\n\nüí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ {game[1]} RUB", reply_markup = menu.create_kb_play_dice(user_data))
def play_dice_step_1(call, bot, user_data):
    chat_id = call.message.chat.id
    sum_bet = func.get_dice_by_hash(user_data)[1]
    type = func.get_dice_by_hash(user_data)[6]
    user_balanse = func.get_user_information(chat_id)[1]
    if sum_bet / 100 * (100 + config.games_comission) <= user_balanse:
        if func.check_non_true_user(chat_id):
            if type != "üé≤üé≤":
                mes = bot.send_message(chat_id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º - {type}")
                bot.register_next_step_handler(mes, get_player_value_dice_game, bot = bot, game_hash = user_data)
            else:
                mes = bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º - üé≤")
                bot.register_next_step_handler(mes, get_firtht_player_value_dice_game, bot = bot, game_hash = user_data)
        else:
            if type != "üé≤üé≤":
                player_value = func.get_dice_by_hash(user_data)[4]
                if player_value == 6:
                    play_non_true_user(chat_id, bot, user_data, 6)
                else:
                    play_non_true_user(chat_id, bot, user_data, player_value + 1)
            else:
                player_value = func.get_dice_by_hash(user_data)[4]
                if player_value == 12:
                    play_non_true_user(chat_id, bot, user_data, 12)
                else:
                    play_non_true_user(chat_id, bot, user_data, player_value + 1)
    else:
        not_enough_money(call.message, bot, sum_bet)
def get_firtht_player_value_dice_game(message, bot, game_hash):
    chat_id = message.chat.id
    player_value = message.dice.value
    mes = bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º - üé≤")
    bot.register_next_step_handler(mes, get_second_player_value_dice_game, bot = bot, game_hash = game_hash, value = player_value)
def get_second_player_value_dice_game(message, bot, game_hash, value):
    chat_id = message.chat.id
    player_value = message.dice.value + value
    game = func.get_dice_by_hash(game_hash)
    func.withdraw_sum_from_balanse(chat_id, game[1] / 100 * (100 + config.games_comission))
    if game[4] > player_value:
        winner_message(game[2], game[1], game[4], player_value, game[6], game_hash, bot)
        lose_message(chat_id, game[1], player_value, game[4], game[6], game_hash, bot)
    elif game[4] < player_value:
        lose_message(game[2], game[1], game[4], player_value, game[6], game_hash, bot)
        winner_message(chat_id, game[1], player_value, game[4], game[6], game_hash, bot)
    elif game[4] == player_value:
        func.popoln_user_balanse(chat_id, game[1])
        func.popoln_user_balanse(game[2], game[1])
        bot.send_message(chat_id, f"{game[6]} Dice #{game[0]}\n\n –ù–∏—á—å—è")
        bot.send_message(game[2], f"{game[6]} Dice #{game[0]}\n\n –ù–∏—á—å—è")
    func.delete_dice_game_by_hash(game_hash)
def get_player_value_dice_game(message, bot, game_hash):
    chat_id = message.chat.id
    player_value = message.dice.value
    game = func.get_dice_by_hash(game_hash)
    func.withdraw_sum_from_balanse(chat_id, game[1] / 100 * (config.games_comission))
    if game[4] > player_value:
        winner_message(game[2], game[1], game[4], player_value, game[6], game_hash, bot)
        lose_message(chat_id, game[1], player_value, game[4], game[6], game_hash, bot)
    elif game[4] < player_value:
        lose_message(game[2], game[1], game[4], player_value, game[6], game_hash, bot)
        winner_message(chat_id, game[1], player_value, game[4], game[6], game_hash, bot)
    elif game[4] == player_value:
        func.popoln_user_balanse(chat_id, game[1])
        func.popoln_user_balanse(game[2], game[1])
        bot.send_message(chat_id, f"{game[6]} Dice #{game[0]}\n\n –ù–∏—á—å—è")
        bot.send_message(game[2], f"{game[6]} Dice #{game[0]}\n\n –ù–∏—á—å—è")
    func.delete_dice_game_by_hash(game_hash)
def winner_message(chat_id, sum_bet, value, vrag_value, type, game_hash, bot):
    bot.send_message(chat_id, f"{type} Dice #{game_hash}\n\nüí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ {sum_bet} RUB\n\nüëÜ –í–∞—à–µ —á–∏—Å–ª–æ {value}\n\nüëá –ß–∏—Å–ª–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ {vrag_value}\n\n‚úÖ–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞ {sum_bet * 2} RUB")
    func.popoln_user_balanse(chat_id, sum_bet * 2)
    func.create_new_history(chat_id, game_hash, sum_bet * 2)
    func.update_user_count_games(chat_id)
    func.update_user_sum_games(chat_id, sum_bet * 2)
def lose_message(chat_id, sum_bet, value, vrag_value, type, game_hash, bot):
    bot.send_message(chat_id, f"{type} Dice #{game_hash}\n\nüí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ {sum_bet} RUB\n\nüëÜ–ß–∏—Å–ª–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ {vrag_value}\n\nüëá –í–∞—à–µ —á–∏—Å–ª–æ {value}\n\n‚ùå–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, –ø–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑")
    func.create_new_history(chat_id, game_hash, 0)
    func.update_user_count_games(chat_id)
def help_dice(call, bot, user_data):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, config.dice_help, reply_markup = menu.create_kb_retrun_main_dice())
def get_all_games(call, bot, user_data):
    chat_id = call.message.chat.id
    games = func.get_all_history(chat_id)
    mes = "–í–∞—à–∏ –∏–≥—Ä—ã:\n"
    for i in games:
        mes += f"Dice #{i[1]} –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞ {i[2]}\n"
    bot.send_message(chat_id, mes, reply_markup = menu.create_kb_retrun_main_dice())
def get_rating(call, bot, user_data):
    chat_id = call.message.chat.id
    count, all_users_count = func.get_rating(chat_id)
    bot.send_message(chat_id, f"–í—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ {count} –º–µ—Å—Ç–æ üèÜ –∏–∑ {all_users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüë•", reply_markup = menu.create_kb_retrun_main_dice())
def play_non_true_user(chat_id, bot, game_hash, value_non_true_user):
    player_value = value_non_true_user
    game = func.get_dice_by_hash(game_hash)
    func.withdraw_sum_from_balanse(chat_id, game[1] / 100 * (config.games_comission))
    if game[4] > player_value:
        winner_message(game[2], game[1], game[4], player_value, game[6], game_hash, bot)
        lose_message(chat_id, game[1], player_value, game[4], game[6], game_hash, bot)
    elif game[4] < player_value:
        lose_message(game[2], game[1], game[4], player_value, game[6], game_hash, bot)
        winner_message(chat_id, game[1], player_value, game[4], game[6], game_hash, bot)
    elif game[4] == player_value:
        func.popoln_user_balanse(chat_id, game[1])
        func.popoln_user_balanse(game[2], game[1])
        bot.send_message(chat_id, f"{game[6]} Dice #{game[0]}\n\n –ù–∏—á—å—è")
        bot.send_message(game[2], f"{game[6]} Dice #{game[0]}\n\n –ù–∏—á—å—è")
    func.delete_dice_game_by_hash(game_hash)



def update_user_balanse(call, bot, user_data):
    chat_id = call.message.chat.id
    mes = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
    bot.register_next_step_handler(mes, update_user_balanse_step1, bot = bot) 
def update_user_balanse_step1(message, bot):
    try:
        chat_id = message.chat.id
        Id = int(message.text)
        mes = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä—É–±–ª—è—Ö")
        bot.register_next_step_handler(mes, update_user_balanse_step2, bot = bot, Id = Id)
    except:
        error_message(message, bot)
def update_user_balanse_step2(message, bot, Id):
    try:
        sum_update = float(message.text)
        chat_id = message.chat.id
        func.update_user_balanse(Id, sum_update)
        usrname = bot.get_chat(Id).username
        bot.send_message(chat_id, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{usrname} –†–∞–≤–µ–Ω {sum_update} RUB")
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup = menu.gen_admin_kb())
    except:
        error_message(message, bot)
def ban_user(call, bot, user_data):
    chat_id = call.message.chat.id
    mes = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    bot.register_next_step_handler(mes, ban_user_step1, bot = bot)
def ban_user_step1(message, bot):
    try:
        chat_id = message.chat.id
        Id = int(message.text)
        func.add_user_to_ban(Id)
        usrname = bot.get_chat(Id).username
        bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{usrname} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup = menu.gen_admin_kb())
    except:
        error_message(message, bot)
def unban_user(call, bot, user_data):
    chat_id = call.message.chat.id
    mes = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    bot.register_next_step_handler(mes, unban_user_step1, bot = bot)
def unban_user_step1(message, bot):
    try:
        chat_id = message.chat.id
        Id = int(message.text)
        func.delete_user_from_ban(Id)
        usrname = bot.get_chat(Id).username
        bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{usrname} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup = menu.gen_admin_kb())
    except:
        error_message(message, bot)
def send_messages_all_users(call, bot, user_data):
    chat_id = call.message.chat.id
    mes = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    bot.register_next_step_handler(mes, send_messages_all_users_step1, bot = bot)
def send_messages_all_users_step1(message, bot):
    chat_id = message.chat.id
    Users = func.get_all_users_inform()
    Count = 0
    try:
        for i in Users:
            i = i[0]
            Count = Count + 1
            if message.text != None:
                bot.send_message(i, message.text)
            elif message.photo != None:
                try:
                    file_info = bot.get_file(message.photo[len(message.photo)-1].file_id)
                    downloaded_file = bot.download_file(file_info.file_path)
                    src= file_info.file_path 
                    with open(src, 'wb') as new_file:
                        new_file.write(downloaded_file)
                except Exception as e:
                    bot.reply_to(message,e )
                with open(src, 'rb') as f:
                    contents = f.read()
                if message.caption != None:
                    C = message.caption
                    bot.send_photo(i, contents, caption = C)
                else:
                    bot.send_photo(i, contents)
            elif message.video != None:
                try:
                    file_info = bot.get_file(message.video.file_id)
                    downloaded_file = bot.download_file(file_info.file_path)
                    src= file_info.file_path 
                    with open(src, 'wb') as new_file:
                        new_file.write(downloaded_file)
                except Exception as e:
                    bot.reply_to(message,e )
                with open(src, 'rb') as f:
                    contents = f.read()
                if message.caption != None:
                    C = message.caption
                    bot.send_video(i, contents, caption = C)
                else:
                    bot.send_video(i, contents)
    except:
        error_message(message)
    bot.send_message(chat_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ " + str(Count) + " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup = menu.gen_admin_kb())
def check_withdraws(call, bot, user_data):
    chat_id = call.message.chat.id
    withdraw = func.get_last_withdraw()
    if withdraw == 0:
        bot.send_message(chat_id, "–í—ã–≤–æ–¥–æ–≤ –Ω–µ—Ç")
    else:
        usrname = bot.get_chat(withdraw[0]).username
        type_withdraw = withdraw[3]
        if type_withdraw == 1:
            type_withdraw = "ü•ù Qiwi"
        else:
            type_withdraw = "‚ò¢Ô∏è Bitcoin"
        bot.send_message(chat_id, f"–í—ã–≤–æ–¥ –æ—Ç @{usrname}\n\n–¢–∏–ø –≤—ã–≤–æ–¥–∞ {type_withdraw}\n\n–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {withdraw[1]}\n\n–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ {withdraw[2]}", reply_markup = menu.gen_check_withdraw_kb(withdraw[0]))
def confirm_withdraw(call, bot, user_data):
    bot.send_message(user_data, "–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞")
    bot.send_message(call.message.chat.id, "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥")
    bot.send_message(call.message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup = menu.gen_admin_kb())
    func.delete_withdraw(user_data)
def delete_withdraw(call, bot, user_data):
    bot.send_message(user_data, "–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞")
    bot.send_message(call.message.chat.id, "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥")
    bot.send_message(call.message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup = menu.gen_admin_kb())
    func.delete_withdraw(user_data)
def add_no_true_user(call, bot, user_data):
    chat_id = call.message.chat.id
    mes = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫—Ä—É—Ç–∫–∏")
    bot.register_next_step_handler(mes, get_id_non_true_user, bot = bot)
def get_id_non_true_user(message, bot):
    try:
        chat_id = message.chat.id
        Id = message.text
        func.add_non_true_user(Id)
        username = bot.get_chat(Id).username
        bot.send_message(chat_id, f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –±—É–¥–µ—Ç –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å")
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup = menu.gen_admin_kb())
    except:
        error_message(message, bot)
def delete_non_true_user(call, bot, user_data):
    chat_id = call.message.chat.id
    mes = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫—Ä—É—Ç–∫–∏")
    bot.register_next_step_handler(mes, delete_non_true_user_step1, bot = bot)
def delete_non_true_user_step1(message, bot):
    try:
        chat_id = message.chat.id
        Id = message.text
        func.delete_non_true_user(Id)
        username = bot.get_chat(Id).username
        bot.send_message(chat_id, f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –±—É–¥–µ—Ç –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å")
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup = menu.gen_admin_kb())
    except:
        error_message(message, bot)
def get_last_message_support(call, bot, user_data):
    chat_id = call.message.chat.id
    quetion = func.get_last_quetion()
    if quetion != 0:
        username = bot.get_chat(quetion[0]).username
        bot.send_message(chat_id, f"–í–æ–ø—Ä–æ—Å –æ—Ç @{username}\n\n–°–∞–º –≤–æ–ø—Ä–æ—Å {quetion[1]}", reply_markup = menu.answer_quetion_support(quetion[0]))
    else:
        bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç")
        bot.send_message(call.message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup = menu.gen_admin_kb())
def delete_quetion(call, bot, user_data):
    chat_id = call.message.chat.id
    quetion = func.get_last_quetion()
    username = bot.get_chat(quetion[0]).username
    func.delete_quetion(quetion[0])
    bot.send_message(quetion[0], "–í–∞—à –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—ã–ª —É–¥–∞–ª–µ–Ω")
    bot.send_message(chat_id, f"–í—ã —É–¥–∞–ª–∏–ª–∏ –≤–æ–ø—Ä–æ—Å –æ—Ç @{username}")
    bot.send_message(call.message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup = menu.gen_admin_kb())
def answer_quetion(call, bot, user_data):
    chat_id = call.message.chat.id
    username = bot.get_chat(user_data).username
    mes = bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç @{username}")
    bot.register_next_step_handler(mes, answer_quetion_step1, bot = bot, user_id = user_data)
def answer_quetion_step1(message, bot, user_id):
    chat_id = message.chat.id
    answer = message.text
    quetion = func.get_last_quetion()
    func.delete_quetion(quetion[0])
    username = bot.get_chat(quetion[0]).username
    bot.send_message(quetion[0], f"–ù–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—ã–ª –¥–∞–Ω –æ—Ç–≤–µ—Ç\n\n–í–æ–ø—Ä–æ—Å:{quetion[1]}\n\n–û—Ç–≤–µ—Ç:{answer}")
    bot.send_message(chat_id, f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–æ–ø—Ä–æ—Å –æ—Ç @{username}")
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup = menu.gen_admin_kb())
def add_answer(call, bot, message):
    chat_id = call.message.chat.id
    mes = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
    bot.register_next_step_handler(mes, add_answer_step1, bot = bot)
def add_answer_step1(message, bot):
    chat_id = message.chat.id
    quetion = message.text
    mes = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å")
    bot.register_next_step_handler(mes, add_answer_step2, bot = bot, quetion = quetion)
def add_answer_step2(message, bot, quetion):
    chat_id = message.chat.id
    hash = random.randint(1000000000000, 999999999999999)
    answer = message.text
    func.create_answer(hash, quetion, answer)
    bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω")
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup = menu.gen_admin_kb())
def delete_answer(call, bot, user_data):
    chat_id = call.message.chat.id
    answers = func.get_all_answers()
    mes = "–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n"
    for i in answers:
        mes += str(i[0]) + " " + str(i[1]) + "\n"
    mes = bot.send_message(chat_id, mes)
    bot.register_next_step_handler(mes,delete_answer_step1, bot = bot)
def delete_answer_step1(message, bot):
    chat_id = message.chat.id
    func.delete_answer(message.text)
    bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω")
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup = menu.gen_admin_kb())

def main_support(message, bot):
    chat_id = message.chat.id
    bot.send_message(chat_id, '‚ùì–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ. –ü–µ—Ä–µ–¥ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ—Å—å–±–∞ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–∞–∑–¥–µ–ª–æ–º "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"', reply_markup = menu.gen_support_kb())
def rules(call, bot, user_data):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, config.rules_bot, reply_markup = menu.return_support())
def support_call(call, bot, user_data):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, '‚ùì–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ. –ü–µ—Ä–µ–¥ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ—Å—å–±–∞ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–∞–∑–¥–µ–ª–æ–º "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"', reply_markup = menu.gen_support_kb())
def create_support(call, bot, user_data):
    chat_id = call.message.chat.id
    if func.check_unik_quetion(chat_id):
        bot.register_next_step_handler(bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", reply_markup = menu.return_support()), get_support_message, bot = bot)
    else:
        bot.send_message(chat_id, "–ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∞—Ä—ã–π")
def get_support_message(message, bot):
    chat_id = message.chat.id
    func.create_support_quetion(chat_id, message.text)
    bot.send_message(chat_id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–æ—Å–ª–∞–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3-—Ö –¥–Ω–µ–π")
    bot.send_message(chat_id, '‚ùì–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ. –ü–µ—Ä–µ–¥ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ—Å—å–±–∞ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–∞–∑–¥–µ–ª–æ–º "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"', reply_markup = menu.gen_support_kb())
def get_answers_message(call, bot, user_data):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", reply_markup = menu.create_answers_kb())
def get_answer(call, bot, user_data):
    chat_id = call.message.chat.id
    answer = func.get_answer_by_hash(user_data)
    bot.send_message(chat_id, f"–í–æ–ø—Ä–æ—Å: {answer[1]}\n\n–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {answer[2]}", reply_markup = menu.create_return_answers_kb())

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
